<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on zhwei's Blog</title><link>https://zhw.in/tags/django/</link><description>Recent content in Django on zhwei's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 13 Jun 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://zhw.in/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Web敏捷开发</title><link>https://zhw.in/post/web%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</link><pubDate>Fri, 13 Jun 2014 00:00:00 +0000</pubDate><guid>https://zhw.in/post/web%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</guid><description>AGILE WEB DEVELOPMENT WITH DJANGO</description></item><item><title>django从一个form保存到两个model</title><link>https://zhw.in/post/django%E4%BB%8E%E4%B8%80%E4%B8%AAform%E4%BF%9D%E5%AD%98%E5%88%B0%E4%B8%A4%E4%B8%AAmodel/</link><pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate><guid>https://zhw.in/post/django%E4%BB%8E%E4%B8%80%E4%B8%AAform%E4%BF%9D%E5%AD%98%E5%88%B0%E4%B8%A4%E4%B8%AAmodel/</guid><description>from django.forms.models import model_to_dict, fields_for_model class UserDetailsForm(ModelForm): def __init__(self, instance=None, *args, **kwargs): _fields = (&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;email&amp;#39;,) _initial = kwargs.pop(&amp;#39;initial&amp;#39;) # pop出initial参数 _initial = model_to_dict(instance.user, _fields) if instance is not None else {} super(UserDetailsForm, self).__init__(initial=_initial, instance=instance, *args, **kwargs) self.fields.update(fields_for_model(User, _fields)) class Meta: model = UserDetails exclude = (&amp;#39;user&amp;#39;,) def save(self, *args, **kwargs): u = self.instance.user u.first_name = self.cleaned_data[&amp;#39;first_name&amp;#39;] u.last_name = self.cleaned_data[&amp;#39;last_name&amp;#39;] u.email = self.cleaned_data[&amp;#39;email&amp;#39;] u.save() profile = super(UserDetailsForm, self).save(*args,**kwargs) return profile 取自 http://stackoverflow.</description></item><item><title>django相关笔记</title><link>https://zhw.in/post/django%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate><guid>https://zhw.in/post/django%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</guid><description>权限判断的装饰符 判断用户是否staff is_staff isn&amp;rsquo;t a permission so instead of permission_required you could use:
@user_passes_test(lambda u: u.is_staff) #或者 from django.contrib.admin.views.decorators import staff_member_required @staff_member_required link
如果已经登陆则跳转 适用于方法 def ver_not_login(func): def ver(*args): request = args[0] if request.user.is_authenticated(): return HttpResponseRedirect(reverse_lazy(&amp;#39;index&amp;#39;)) else: return func(request) return ver 使用 @ver_not_login def register(request): pass 适用于url def ver_not_login_with_template(func): def ver(*args, **kwargs): request = args[0] template_name = kwargs[&amp;#39;template_name&amp;#39;] if request.user.is_authenticated(): return HttpResponseRedirect(reverse_lazy(&amp;#39;index&amp;#39;)) else: return func(request, template_name) return ver 使用 url(r&amp;#39;^$&amp;#39;, ver_not_login_with_template(login), {&amp;#39;template_name&amp;#39;:&amp;#39;login.</description></item></channel></rss>